language: generic
sudo: required  # 管理者権限を指

# まず TravisCI に Docker をインストール
services:
  - docker

# テスト用のコンテナをビルド
before_install:
  - docker build -t iskoroom/react-test -f ./client/Dockerfile.dev ./client

# テスト実行
# TravisCIはコマンド実行結果の Status Code が 0 以外だった場合は失敗と判断する
# TravisCIは script が終了したら自動で exit するように期待しているので -e を入れておく
script:
  - docker run -e CI=true iskoroom/react-test npm run test

after_success:
  # 1. 上記テストをパスしたらprod用のコンテナをビルド
  - docker build -t iskoroom/multi-docker-client ./client
  - docker build -t iskoroom/multi-docker-nginx ./nginx
  - docker build -t iskoroom/multi-docker-server ./server
  - docker build -t iskoroom/multi-docker-worker ./worker
  # 2. Dockerhubにログイン(TraviCIに登録した環境変数を使用)
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  # 3. ビルドしたImageをDockerhubにpush
  - docker push iskoroom/multi-docker-client
  - docker push iskoroom/multi-docker-nginx
  - docker push iskoroom/multi-docker-server
  - docker push iskoroom/multi-docker-worker

deploy:
  provider: elasticbeanstalk  # TravisCI が自動で AWS Elastic Beanstalk にリーチしてくれる
  region: "us-east-2"         # Elastic Beanstalk を作成した Region を指定
  app: "multi-docker"         # アプリケーション名
  env: "MultiDocker-env"      # Elastic Beanstalk の環境名
  bucket_name: "elasticbeanstalk-us-east-2-288341566704" # Elastic Beanstalk を作成したときに同時に作成された S3 の名前(同じRegionなら何でも良い？)
  bucket_path: "docker-multi" # 最初はデプロイするまで存在しないフォルダだけど、基本的にアプリケーション名と同じで良い
  on:
    branch: master            # master ブランチに push があったときのみデプロイする
  access_key_id: "$AWS_ACCESS_KEY"      # IAMで作成したユーザーに割り当てられたアクセスキー
  secret_access_key: "$AWS_SECRET_KEY"  # IAMで作成したユーザーに割り当てられたシークレットアクセスキー
